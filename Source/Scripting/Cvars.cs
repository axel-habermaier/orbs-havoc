//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by the Pegasus Asset Compiler.
//     Tuesday, 20 October 2015, 17:33:59
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PointWars.Scripting
{
	using System;
	using System.Diagnostics;
	using Pegasus.Utilities;
	using Pegasus.Math;
	using Pegasus.Platform;
	using Pegasus.Platform.Graphics;
	using Pegasus.Platform.Logging;
	using Scripting;
	using Pegasus.UserInterface.Controls;
	using Validators;

	internal static class Cvars
	{
		/// <summary>
		///     The scaling factor that is applied to all time-scaling sensitive timing values.
		/// </summary>
		public static Cvar<double> TimeScaleCvar { get; private set; }

		/// <summary>
		///     The screen resolution used by the application in fullscreen mode.
		/// </summary>
		public static Cvar<Size> ResolutionCvar { get; private set; }

		/// <summary>
		///     The size in pixels of the application window in non-fullscreen mode.
		/// </summary>
		public static Cvar<Size> WindowSizeCvar { get; private set; }

		/// <summary>
		///     The screen position of the application window's top left corner in non-fullscreen mode.
		/// </summary>
		public static Cvar<Vector2> WindowPositionCvar { get; private set; }

		/// <summary>
		///     The width of the application's window in non-fullscreen mode.
		/// </summary>
		public static Cvar<WindowMode> WindowModeCvar { get; private set; }

		/// <summary>
		///     Shows or hides the debug overlay.
		/// </summary>
		public static Cvar<bool> ShowDebugOverlayCvar { get; private set; }

		/// <summary>
		///     Determines the graphics API that should be used for rendering. If the chosen graphics API is not available, the
		///     application automatically tries to fall back to a supported one.
		/// </summary>
		public static Cvar<GraphicsApi> GraphicsApiCvar { get; private set; }

		/// <summary>
		///     Indicates whether the hardware cursor is enabled. Hardware cursors are frame rate independent and are generally
		///     preferable where supported.
		/// </summary>
		public static Cvar<bool> HardwareCursorCvar { get; private set; }

		/// <summary>
		///     Enables or disable vertical synchronization (vsync). Enabling vsync avoids screen tearing but increases latency.
		/// </summary>
		public static Cvar<bool> VsyncCvar { get; private set; }

		/// <summary>
		///     The scaling factor that is applied to all time-scaling sensitive timing values.
		/// </summary>
		public static double TimeScale
		{
			get { return TimeScaleCvar.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value, nameof(value));
				TimeScaleCvar.Value = value;
			}
		}

		/// <summary>
		///     The screen resolution used by the application in fullscreen mode.
		/// </summary>
		public static Size Resolution
		{
			get { return ResolutionCvar.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value, nameof(value));
				ResolutionCvar.Value = value;
			}
		}

		/// <summary>
		///     The size in pixels of the application window in non-fullscreen mode.
		/// </summary>
		public static Size WindowSize
		{
			get { return WindowSizeCvar.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value, nameof(value));
				WindowSizeCvar.Value = value;
			}
		}

		/// <summary>
		///     The screen position of the application window's top left corner in non-fullscreen mode.
		/// </summary>
		public static Vector2 WindowPosition
		{
			get { return WindowPositionCvar.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value, nameof(value));
				WindowPositionCvar.Value = value;
			}
		}

		/// <summary>
		///     The width of the application's window in non-fullscreen mode.
		/// </summary>
		public static WindowMode WindowMode
		{
			get { return WindowModeCvar.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value, nameof(value));
				WindowModeCvar.Value = value;
			}
		}

		/// <summary>
		///     Shows or hides the debug overlay.
		/// </summary>
		public static bool ShowDebugOverlay
		{
			get { return ShowDebugOverlayCvar.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value, nameof(value));
				ShowDebugOverlayCvar.Value = value;
			}
		}

		/// <summary>
		///     Determines the graphics API that should be used for rendering. If the chosen graphics API is not available, the
		///     application automatically tries to fall back to a supported one.
		/// </summary>
		public static GraphicsApi GraphicsApi
		{
			get { return GraphicsApiCvar.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value, nameof(value));
				GraphicsApiCvar.Value = value;
			}
		}

		/// <summary>
		///     Indicates whether the hardware cursor is enabled. Hardware cursors are frame rate independent and are generally
		///     preferable where supported.
		/// </summary>
		public static bool HardwareCursor
		{
			get { return HardwareCursorCvar.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value, nameof(value));
				HardwareCursorCvar.Value = value;
			}
		}

		/// <summary>
		///     Enables or disable vertical synchronization (vsync). Enabling vsync avoids screen tearing but increases latency.
		/// </summary>
		public static bool Vsync
		{
			get { return VsyncCvar.Value; }
			[DebuggerHidden]
			set
			{
				Assert.ArgumentNotNull((object)value, nameof(value));
				VsyncCvar.Value = value;
			}
		}

		/// <summary>
		///     Raised when the 'TimeScale' cvar is changing. The new value is passed to the event handler.
		/// </summary>
		public static event Action<double> TimeScaleChanging
		{
			add { TimeScaleCvar.Changing += value; }
			remove { TimeScaleCvar.Changing -= value; }
		}

		/// <summary>
		///     Raised when the 'TimeScale' cvar is changed. The previous value is passed to the event handler.
		/// </summary>
		public static event Action<double> TimeScaleChanged
		{
			add { TimeScaleCvar.Changed += value; }
			remove { TimeScaleCvar.Changed -= value; }
		}

		/// <summary>
		///     Raised when the 'Resolution' cvar is changing. The new value is passed to the event handler.
		/// </summary>
		public static event Action<Size> ResolutionChanging
		{
			add { ResolutionCvar.Changing += value; }
			remove { ResolutionCvar.Changing -= value; }
		}

		/// <summary>
		///     Raised when the 'Resolution' cvar is changed. The previous value is passed to the event handler.
		/// </summary>
		public static event Action<Size> ResolutionChanged
		{
			add { ResolutionCvar.Changed += value; }
			remove { ResolutionCvar.Changed -= value; }
		}

		/// <summary>
		///     Raised when the 'WindowSize' cvar is changing. The new value is passed to the event handler.
		/// </summary>
		public static event Action<Size> WindowSizeChanging
		{
			add { WindowSizeCvar.Changing += value; }
			remove { WindowSizeCvar.Changing -= value; }
		}

		/// <summary>
		///     Raised when the 'WindowSize' cvar is changed. The previous value is passed to the event handler.
		/// </summary>
		public static event Action<Size> WindowSizeChanged
		{
			add { WindowSizeCvar.Changed += value; }
			remove { WindowSizeCvar.Changed -= value; }
		}

		/// <summary>
		///     Raised when the 'WindowPosition' cvar is changing. The new value is passed to the event handler.
		/// </summary>
		public static event Action<Vector2> WindowPositionChanging
		{
			add { WindowPositionCvar.Changing += value; }
			remove { WindowPositionCvar.Changing -= value; }
		}

		/// <summary>
		///     Raised when the 'WindowPosition' cvar is changed. The previous value is passed to the event handler.
		/// </summary>
		public static event Action<Vector2> WindowPositionChanged
		{
			add { WindowPositionCvar.Changed += value; }
			remove { WindowPositionCvar.Changed -= value; }
		}

		/// <summary>
		///     Raised when the 'WindowMode' cvar is changing. The new value is passed to the event handler.
		/// </summary>
		public static event Action<WindowMode> WindowModeChanging
		{
			add { WindowModeCvar.Changing += value; }
			remove { WindowModeCvar.Changing -= value; }
		}

		/// <summary>
		///     Raised when the 'WindowMode' cvar is changed. The previous value is passed to the event handler.
		/// </summary>
		public static event Action<WindowMode> WindowModeChanged
		{
			add { WindowModeCvar.Changed += value; }
			remove { WindowModeCvar.Changed -= value; }
		}

		/// <summary>
		///     Raised when the 'ShowDebugOverlay' cvar is changing. The new value is passed to the event handler.
		/// </summary>
		public static event Action<bool> ShowDebugOverlayChanging
		{
			add { ShowDebugOverlayCvar.Changing += value; }
			remove { ShowDebugOverlayCvar.Changing -= value; }
		}

		/// <summary>
		///     Raised when the 'ShowDebugOverlay' cvar is changed. The previous value is passed to the event handler.
		/// </summary>
		public static event Action<bool> ShowDebugOverlayChanged
		{
			add { ShowDebugOverlayCvar.Changed += value; }
			remove { ShowDebugOverlayCvar.Changed -= value; }
		}

		/// <summary>
		///     Raised when the 'GraphicsApi' cvar is changing. The new value is passed to the event handler.
		/// </summary>
		public static event Action<GraphicsApi> GraphicsApiChanging
		{
			add { GraphicsApiCvar.Changing += value; }
			remove { GraphicsApiCvar.Changing -= value; }
		}

		/// <summary>
		///     Raised when the 'GraphicsApi' cvar is changed. The previous value is passed to the event handler.
		/// </summary>
		public static event Action<GraphicsApi> GraphicsApiChanged
		{
			add { GraphicsApiCvar.Changed += value; }
			remove { GraphicsApiCvar.Changed -= value; }
		}

		/// <summary>
		///     Raised when the 'HardwareCursor' cvar is changing. The new value is passed to the event handler.
		/// </summary>
		public static event Action<bool> HardwareCursorChanging
		{
			add { HardwareCursorCvar.Changing += value; }
			remove { HardwareCursorCvar.Changing -= value; }
		}

		/// <summary>
		///     Raised when the 'HardwareCursor' cvar is changed. The previous value is passed to the event handler.
		/// </summary>
		public static event Action<bool> HardwareCursorChanged
		{
			add { HardwareCursorCvar.Changed += value; }
			remove { HardwareCursorCvar.Changed -= value; }
		}

		/// <summary>
		///     Raised when the 'Vsync' cvar is changing. The new value is passed to the event handler.
		/// </summary>
		public static event Action<bool> VsyncChanging
		{
			add { VsyncCvar.Changing += value; }
			remove { VsyncCvar.Changing -= value; }
		}

		/// <summary>
		///     Raised when the 'Vsync' cvar is changed. The previous value is passed to the event handler.
		/// </summary>
		public static event Action<bool> VsyncChanged
		{
			add { VsyncCvar.Changed += value; }
			remove { VsyncCvar.Changed -= value; }
		}

		/// <summary>
		///     Initializes the instances declared by the registry.
		/// </summary>
		public static void Initialize()
		{
			TimeScaleCvar = new Cvar<double>("time_scale", 1.0, "The scaling factor that is applied to all time-scaling sensitive timing values.", UpdateMode.Immediate, false, false, new RangeAttribute(0.1, 10.0));
			ResolutionCvar = new Cvar<Size>("resolution", new Size(1024, 768), "The screen resolution used by the application in fullscreen mode.", UpdateMode.Immediate, true, false, new WindowSizeAttribute());
			WindowSizeCvar = new Cvar<Size>("window_size", new Size(1024, 768), "The size in pixels of the application window in non-fullscreen mode.", UpdateMode.Immediate, true, true, new WindowSizeAttribute());
			WindowPositionCvar = new Cvar<Vector2>("window_position", new Vector2(100, 100), "The screen position of the application window's top left corner in non-fullscreen mode.", UpdateMode.Immediate, true, true, new WindowPositionAttribute());
			WindowModeCvar = new Cvar<WindowMode>("window_mode", WindowMode.Fullscreen, "The width of the application's window in non-fullscreen mode.", UpdateMode.Immediate, true, true);
			ShowDebugOverlayCvar = new Cvar<bool>("show_debug_overlay", PlatformInfo.IsDebug, "Shows or hides the debug overlay.", UpdateMode.Immediate, true, false);
			GraphicsApiCvar = new Cvar<GraphicsApi>("graphics_api", PlatformInfo.Platform == PlatformType.Windows ? GraphicsApi.Direct3D11 : GraphicsApi.OpenGL3, "Determines the graphics API that should be used for rendering. If the chosen graphics API is not available, the application automatically tries to fall back to a supported one.", UpdateMode.OnAppRestart, true, false);
			HardwareCursorCvar = new Cvar<bool>("hardware_cursor", true, "Indicates whether the hardware cursor is enabled. Hardware cursors are frame rate independent and are generally preferable where supported.", UpdateMode.Immediate, true, false);
			VsyncCvar = new Cvar<bool>("vsync", true, "Enables or disable vertical synchronization (vsync). Enabling vsync avoids screen tearing but increases latency.", UpdateMode.Immediate, true, false);

			CvarRegistry.Register(TimeScaleCvar);
			CvarRegistry.Register(ResolutionCvar);
			CvarRegistry.Register(WindowSizeCvar);
			CvarRegistry.Register(WindowPositionCvar);
			CvarRegistry.Register(WindowModeCvar);
			CvarRegistry.Register(ShowDebugOverlayCvar);
			CvarRegistry.Register(GraphicsApiCvar);
			CvarRegistry.Register(HardwareCursorCvar);
			CvarRegistry.Register(VsyncCvar);
		}

		/// <summary>
		///     Initializes the instances imported by the registry.
		/// </summary>
		public static void Resolve()
		{
		}
	}
}
